
# Crear proyecto

npx @react-native-community/cli@latest init navegationExample
### Componentes

En React Native, los componentes son el bloque básico de la UI, al igual que en React. Sin embargo, en lugar de usar HTML, usamos componentes nativos como <View>, <Text>, <Image>, etc. Estos componentes permiten que el código JavaScript interactúe directamente con los elementos nativos de cada plataforma (iOS y Android).

*Ejemplo:*
jsx
// Uso:
<>
  <ComponenteEjemplo prop="mi valor" />
</>

// Declaracion:
import React from 'react';
import { View, Text } from 'react-native';

function ComponenteEjemplo({ prop }) {
  return (
    <View>
      <Text>
        Aca tengo un elemento de texto y quiero poder cambiar 
        una parte de manera dinamica, entonces uso {prop}
      </Text>
    </View>
  );
}


### Children

Prop especial de todos los componentes, nos permite renderizar de forma dinámica el contenido que el componente recibe a la hora de usarlo dentro de sus tags.

*Ejemplo:*
jsx
// App.js
import React from 'react';
import { View, Text } from 'react-native';
import { RowList } from './RowList';

export default function App() {
  return (
    <RowList rows={[
      { id: 'first', content: <Text>This is the first item.</Text> },
      { id: 'second', content: <Text>This is the second item.</Text> },
      { id: 'third', content: <Text>This is the third item.</Text> }
    ]} />
  );
}

// RowList.js
import React from 'react';
import { View } from 'react-native';

export function RowList({ rows }) {
  return (
    <View>
      {rows.map(row => (
        <View key={row.id}>
          {row.content}
        </View>
      ))}
    </View>
  );
}


### Eventos

Para escuchar eventos en React Native, utilizamos props con el evento correspondiente y le pasamos el comportamiento que queremos. Por ejemplo, para escuchar eventos de toque, usamos onPress.

*Ejemplo:*
jsx
import React from 'react';
import { Button, Alert } from 'react-native';

export default function MyButton() {
  return (
    <Button
      title="Press me"
      onPress={() => Alert.alert('Button pressed!')}
    />
  );
}


### State

Para manejar estados podemos utilizar varios [hooks](https://react.dev/reference/react/hooks), pero el que vamos a utilizar más frecuentemente es useState.

#### useState

*Ejemplo:*
jsx
import React, { useState } from 'react';
import { View, TextInput, Button, Text } from 'react-native';

export default function Form() {
  const [name, setName] = useState('Taylor');
  const [age, setAge] = useState(42);

  return (
    <View>
      <TextInput
        value={name}
        onChangeText={setName}
        style={{ height: 40, borderColor: 'gray', borderWidth: 1 }}
      />
      <Button title="Increment age" onPress={() => setAge(age + 1)} />
      <Text>Hello, {name}. You are {age}.</Text>
    </View>
  );
}


### useEffect

Es un hook que nos permite ejecutar lógica en determinados momentos del ciclo de vida de un componente.

*Ejemplo:*
jsx
import React, { useEffect, useState } from 'react';
import { View, Text } from 'react-native';
import { createConnection } from './chat.js';

function ChatRoom({ roomId }) {
  const [serverUrl, setServerUrl] = useState('https://localhost:1234');

  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [serverUrl, roomId]); // Arreglo de dependencias

  return (
    <View>
      <Text>Chat room: {roomId}</Text>
    </View>
  );
}


### Context

Es un hook que nos permite suscribirnos a un contexto de un componente.

*Ejemplo:*
jsx
// LevelContext.js:
import { createContext } from 'react';

export const LevelContext = createContext(1);

// Component.jsx:
import React, { useContext } from 'react';
import { Text } from 'react-native';
import { LevelContext } from './LevelContext';

export default function Heading({ children }) {
  const level = useContext(LevelContext);

  return (
    <Text style={{ fontSize: 20 * level }}>
      {children}
    </Text>
  );
}


### Navegación

Para la navegación en React Native, se suele usar la biblioteca react-navigation. Aquí hay un ejemplo básico de navegación utilizando react-navigation.

*Ejemplo:*
jsx
// App.js
import * as React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import HomeScreen from './HomeScreen';
import DetailsScreen from './DetailsScreen';

const Stack = createStackNavigator();

function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">
        <Stack.Screen name="Home" component={HomeScreen} />
        <Stack.Screen name="Details" component={DetailsScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

export default App;

// HomeScreen.js
import React from 'react';
import { Button, View, Text } from 'react-native';

function HomeScreen({ navigation }) {
  return (
    <View>
      <Text>Home Screen</Text>
      <Button
        title="Go to Details"
        onPress={() => navigation.navigate('Details')}
      />
    </View>
  );
}

export default HomeScreen;

// DetailsScreen.js
import React from 'react';
import { View, Text } from 'react-native';

function DetailsScreen() {
  return (
    <View>
      <Text>Details Screen</Text>
    </View>
  );
}

export default DetailsScreen;


Este es un ejemplo básico de navegación usando react-navigation. Puedes usar otras funciones como useParams para obtener parámetros de la ruta y useNavigate para la navegación programática.

### Ejemplo de Estructura Básica

#### App.js
jsx
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import SignUp from './screens/SignUp';
import Login from './screens/Login';
import PlayerList from './screens/PlayerList';
import PlayerDetails from './screens/PlayerDetails';

const Stack = createStackNavigator();

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Login">
        <Stack.Screen name="SignUp" component={SignUp} />
        <Stack.Screen name="Login" component={Login} />
        <Stack.Screen name="PlayerList" component={PlayerList} />
        <Stack.Screen name="PlayerDetails" component={PlayerDetails} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}


#### SignUp.js
jsx
import React, { useState } from 'react';
import { View, TextInput, Button, Text, Alert } from 'react-native';
import axios from 'axios';

export default function SignUp({ navigation }) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleSignUp = async () => {
    try {
      const response = await axios.post('https://yourapi.com/signup', { email, password });
      Alert.alert('Success', 'Account created successfully');
      navigation.navigate('Login');
    } catch (error) {
      Alert.alert('Error', 'Something went wrong');
    }
  };

  return (
    <View>
      <TextInput placeholder="Email" value={email} onChangeText={setEmail} />
      <TextInput placeholder="Password" value={password} secureTextEntry onChangeText={setPassword} />
      <Button title="Sign Up" onPress={handleSignUp} />
    </View>
  );
}


#### PlayerList.js
jsx
import React, { useState, useEffect } from 'react';
import { View, FlatList, Text, Button } from 'react-native';
import axios from 'axios';

export default function PlayerList({ navigation }) {
  const [players, setPlayers] = useState([]);

  useEffect(() => {
    const fetchPlayers = async () => {
      const response = await axios.get('https://yourapi.com/players');
      setPlayers(response.data);
    };
    fetchPlayers();
  }, []);

  return (
    <View>
      <FlatList
        data={players}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View>
            <Text>{item.name}</Text>
            <Button title="Details" onPress={() => navigation.navigate('PlayerDetails', { playerId: item.id })} />
          </View>
        )}
      />
    </View>
  );
}


Claro, aquí tienes un mini resumen de algunos patrones comunes y prácticas recomendadas en React Native:

### 1. *Devolver Información al Componente Padre*

Para devolver información de un componente hijo a un componente padre, puedes pasar una función como prop desde el padre al hijo y llamar a esa función desde el hijo con los datos que deseas devolver.

*Ejemplo:*
jsx
// Padre.js
import React, { useState } from 'react';
import { View, Text } from 'react-native';
import Hijo from './Hijo';

export default function Padre() {
  const [mensaje, setMensaje] = useState('');

  const manejarMensaje = (nuevoMensaje) => {
    setMensaje(nuevoMensaje);
  };

  return (
    <View>
      <Hijo enviarMensaje={manejarMensaje} />
      <Text>{mensaje}</Text>
    </View>
  );
}

// Hijo.js
import React from 'react';
import { Button } from 'react-native';

export default function Hijo({ enviarMensaje }) {
  return (
    <Button title="Enviar Mensaje" onPress={() => enviarMensaje('Hola desde el Hijo!')} />
  );
}


### 2. *Hacer un Elemento Clickable*

Para hacer un elemento clickable en React Native, puedes usar componentes como Button, TouchableOpacity, TouchableHighlight, TouchableWithoutFeedback, o Pressable.

*Ejemplo:*
jsx
import React from 'react';
import { TouchableOpacity, Text, Alert } from 'react-native';

export default function ClickableComponent() {
  return (
    <TouchableOpacity onPress={() => Alert.alert('Elemento clickeado!')}>
      <Text>¡Haz click aquí!</Text>
    </TouchableOpacity>
  );
}


### 3. *Comunicación entre Componentes*

#### *Prop Drilling*

Pasar datos y funciones desde el componente padre a través de varios niveles de componentes.

*Ejemplo:*
jsx
// App.js
import React from 'react';
import { View } from 'react-native';
import NivelUno from './NivelUno';

export default function App() {
  const mensaje = 'Hola desde el componente raíz!';
  return (
    <View>
      <NivelUno mensaje={mensaje} />
    </View>
  );
}

// NivelUno.js
import React from 'react';
import { View } from 'react-native';
import NivelDos from './NivelDos';

export default function NivelUno({ mensaje }) {
  return (
    <View>
      <NivelDos mensaje={mensaje} />
    </View>
  );
}

// NivelDos.js
import React from 'react';
import { Text } from 'react-native';

export default function NivelDos({ mensaje }) {
  return (
    <Text>{mensaje}</Text>
  );
}


#### *Context API*

Usar Context API para evitar prop drilling y compartir datos entre componentes sin necesidad de pasar props manualmente por cada nivel.

*Ejemplo:*
jsx
// Contexto.js
import React, { createContext, useState } from 'react';

export const MensajeContext = createContext();

export function MensajeProvider({ children }) {
  const [mensaje, setMensaje] = useState('Hola desde el contexto!');
  return (
    <MensajeContext.Provider value={mensaje}>
      {children}
    </MensajeContext.Provider>
  );
}

// App.js
import React from 'react';
import { View } from 'react-native';
import { MensajeProvider } from './Contexto';
import Componente from './Componente';

export default function App() {
  return (
    <MensajeProvider>
      <View>
        <Componente />
      </View>
    </MensajeProvider>
  );
}

// Componente.js
import React, { useContext } from 'react';
import { Text } from 'react-native';
import { MensajeContext } from './Contexto';

export default function Componente() {
  const mensaje = useContext(MensajeContext);
  return (
    <Text>{mensaje}</Text>
  );
}


Estos patrones y prácticas te ayudarán a manejar la comunicación y la interactividad en tu aplicación React 


Screens Api App.tsx donde se ubican los archivos necesarios